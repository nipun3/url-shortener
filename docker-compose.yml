version: '3'

services:
  mongo:
      image: mongo:7.0
      container_name: mongo-container
      command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
      ports:
        - 27017:27017
      extra_hosts:
        - "host.docker.internal:host-gateway"
      healthcheck:
        test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
        interval: 5s
        timeout: 30s
        start_period: 0s
        start_interval: 1s
        retries: 30
      restart: always
      volumes:
        - "mongo_data:/data/db"
        - "mongo_config:/data/configdb"
      # profiles:
      #   - infra

  redis:
      image: redis:6.2-alpine
      restart: always
      ports:
        - '6379:6379'
      # profiles:
      #   - infra

  api-gateway:
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
    ports:
      - 3000:3000
    container_name: api-gateway-container
    restart: always
    env_file:
      - .env
    environment:
      - "REDIS_URL=redis://host.docker.internal:6379"
      - "GRPC_SERVER_URL=url-container:5000"
    depends_on:
      - mongo
      - redis

  url:
    build:
      context: .
      dockerfile: ./apps/url/Dockerfile
    ports:
      - 5000:5000
      - 3001:3001
    container_name: url-container
    restart: always
    env_file:
      - .env
    environment:
      - "MONGO_DB_URL=mongodb://host.docker.internal:27017/url?replicaSet=rs0"
      - "REDIS_URL=redis://host.docker.internal:6379"
      - "GRPC_SERVER_URL=url-container:5000"
    depends_on:
      - mongo
      - redis

volumes:
  mongo_data:
  mongo_config:
